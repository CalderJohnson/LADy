import Head from "next/head";
import React from "react"
import { Inter } from "@next/font/google";
import { Center, Container, HStack, Heading } from "@chakra-ui/layout";
import { Textarea } from "@chakra-ui/textarea";
import { RepeatIcon } from "@chakra-ui/icons";

import Footer from "../Components/Footer";
import { useState, useEffect } from "react";
import { Button } from "@chakra-ui/button";
import Chart from "../Components/Chart";
import {
  Select,
  FormControl,
  FormLabel,
  Spinner,
  useToast,
} from "@chakra-ui/react";
const inter = Inter({ subsets: ["latin"] });

const Languages = [
  [''        , "None"],
  ['pes-Arab', 'Persian'],
  ['zho_Hans', "Chinese"],
  ['deu_Latn', 'German'],
  ['arb_Arab', 'Arabic'],
  ['fra_Latn', 'French'],
  ['spa_Latn', 'Spanish']
]

const ASPECT_MODELS = [
  'bert',
  'btm',
  'ctm',
  'random',
  'lda'
]

const API_LINKS = {
  'staging': 'http://localhost:5000',
  'production': 'https://lady.onrender.com'
}

const ENV = 'staging'

//use state to store textarea value
export default function Home() {
  const toast = useToast();
  const [formval, setformval] = useState(
    "The food was fresh and delicious, and the best part was that the chef sent us a dessert they had created that day."
  );
  const [selectedModel, setSelectedModel] = useState("lda");
  const [selectedLang, setSelectedLang] = useState("arb_Arab");
  const [naspects, setnaspects] = useState(5);

  const [data, setData] = useState("");
  const [isLoad, setIsLoading] = useState(true);

  let apilink = API_LINKS[ENV];

  useEffect(() => {
    const fetchData = async () => {
      // get the data from the api
      const data = await fetch(`${apilink}/random`);
      // convert the data to json
      const json = await data.json();

      // set state with the result
      console.log("data", data);
      setIsLoading(false);
    };

    // call the function
    fetchData()
      // make sure to catch any error
      .catch(console.error);
  }, []);

  const getRandomReview = async () => {
    const response = await fetch(`${apilink}/random`);
    const json = await response.json();

    setformval(json[0]);
  };

  const handleSubmit = React.useCallback(async (e) => {
    e.preventDefault();
    setIsLoading(!isLoad);

    const requestOptions = {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        text: formval,
        model: selectedModel,
        lang: selectedLang,
        naspects: naspects,
      }),
    };

    const response = await fetch(`${apilink}/api`, requestOptions);
    const json = await response.json();
    setIsLoading(false);

    if (Object.keys(json).length === 0) {
      toast({
        title: "Model not found",
        status: "error",
        isClosable: true,
        position: "top",
      });
    }

    setData(json);
  }, [isLoad, selectedLang, selectedModel, naspects]);

  let handleInputChange = (e) => {
    let inputValue = e.target.value;
    setformval(inputValue);
  };

  const isError = React.useMemo(() => formval === "", [formval]);

  const values = React.useMemo(() => Object.entries(data).sort(([, a], [, b]) => b - a), [data]);

  const output = React.useMemo(() => ({
    labels: values.map(([label]) => label),
    datasets: [
      {
        label: "Score",
        data: values.map(([, value]) => value),
        borderColor: "rgb(53, 162, 235)",
        backgroundColor: "#38B2AC",
      } /*
      {
        label: "Dataset 2",
        data: [20, 30, 20, 10, 10, 5, 0],
        borderColor: "rgb(53, 162, 235)",
        backgroundColor: "rgba(53, 162, 235, 0.5)",
      },*/,
    ],
  }), [values]);

  return (
    <>
      <Head>
        <title>Latent Aspect Detection</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {!isLoad ? (
        <Container minWidth={"container.lg"} p="5">
          <Heading mb="10">Latent Aspect Detection</Heading>
          <FormControl isInvalid={isError}>
            <HStack mb="5" spacing={4}>
              {/*}
              <Button
                leftIcon={<InfoOutlineIcon />}
                colorScheme="teal"
                variant="outline"
              >
                Info
      </Button>{" "} */}
              <Button
                leftIcon={<RepeatIcon />}
                colorScheme="teal"
                variant="outline"
                onClick={getRandomReview}
              >
                Random review
              </Button>
              <FormLabel>Model: </FormLabel>
              <Select
                maxWidth={"100px"}
                borderColor={"teal"}
                value={selectedModel}
                onChange={(e) => setSelectedModel(e.target.value)}
              >
                {ASPECT_MODELS.map(am => <option key={am} style={{textTransform: "capitalize"}} value={am}>{am}</option>)}
              </Select>
              <FormLabel>Language </FormLabel>
              <Select
                maxWidth={"100px"}
                borderColor={"teal"}
                value={selectedLang}
                onChange={(e) => setSelectedLang(e.target.value)}
              >
                {Languages.map(([val, label]) => <option key={val} value={val}>{label}</option>)}
              </Select>

              {/* <FormLabel>Number of aspects</FormLabel> */}

              {/* <NumberInput
                borderColor={"teal"}
                value={naspects}
                onChange={(value) => setnaspects(value)}
                min={5}
                max={25}
                step={5}
                maxW={24}
              >
                <NumberInputField />
                <NumberInputStepper>
                  <NumberIncrementStepper />
                  <NumberDecrementStepper />
                </NumberInputStepper>
              </NumberInput> */}

            </HStack>
            <Textarea
              mb="5"
              placeholder="Here is a sample placeholder"
              onChange={handleInputChange}
              value={formval}
            />
            <Button
              colorScheme="teal"
              type="submit"
              disabled={isLoad}
              onClick={handleSubmit}
            >
              Submit
            </Button>
          </FormControl>
          {<Chart output={output} />}

          <Footer />
        </Container>
      ) : (
        <Center h="100vd">
          <Spinner />
        </Center>
      )}
    </>
  );
}
