import Head from "next/head";
import React, { useState } from "react";
import { Container, HStack, Heading } from "@chakra-ui/layout";
import { Textarea } from "@chakra-ui/textarea";
import { RepeatIcon } from "@chakra-ui/icons";

import Footer from "../Components/Footer";
import { Button } from "@chakra-ui/button";
import { Chart } from "../Components/Chart";
import { Select, FormControl, FormLabel, Spinner } from "@chakra-ui/react";
import axios from "axios";
import { A, R, RD, S, pipe } from "prelude";
import { useFetch } from "@/hooks/useFetch";
import { match } from "ts-pattern";
import { identity } from "fp-ts/lib/function";

type Lang =
  | "arb_Arab"
  | "pes_Arab"
  | "zho_Hans"
  | "fra_Latn"
  | "spa_Latn"
  | "deu_Latn"
  | "eng";

const isLang = (x: unknown): x is Lang => {
  return (
    x === "arb_Arab" ||
    x === "pes_Arab" ||
    x === "zho_Hans" ||
    x === "fra_Latn" ||
    x === "spa_Latn" ||
    x === "deu_Latn" ||
    x === "eng"
  );
};

const getLangName = (lang: Lang) =>
  match(lang)
    .with("arb_Arab", () => "Arabic")
    .with("deu_Latn", () => "Dutch")
    .with("fra_Latn", () => "French")
    .with("pes_Arab", () => "Persian")
    .with("spa_Latn", () => "Spanish")
    .with("zho_Hans", () => "Chinese")
    .with("eng", () => "English")
    .otherwise(identity);

const getAspectModelName = (name: string) =>
  match(name)
    .with("rnd", () => "random")
    .otherwise((x) => x);

const API_LINKS = {
  staging: "http://localhost:5000",
  production: "https://lady.onrender.com",
};

const ENV = "staging";

const apiLink = API_LINKS[ENV];

type Model = "bert" | "ctm" | "lda" | "rnd" | "btm";
const isModel = (x: unknown): x is Model => {
  return (
    x === "bert" || x === "ctm" || x === "lda" || x === "rnd" || x === "btm"
  );
};

//use state to store textarea value
export default function Home() {
  const [reviewInput, setReviewInput] = useState<RD.RemoteData<string, string>>(
    RD.Data({
      data: "The food was fresh and delicious, and the best part was that the chef sent us a dessert they had created that day.",
    })
  );

  const [selectedModel, setSelectedModel] = useState<Model>("lda");
  const [selectedLang, setSelectedLang] = useState<Lang>();

  const [data, setData] = useState<
    RD.RemoteData<string, Record<string, string>>
  >(RD.Init);

  const models = useFetch<Record<Lang, Array<Model>>>({
    url: `${apiLink}/get_models`,
  });

  const getRandomReview = React.useCallback(async () => {
    setReviewInput(RD.Loading);

    axios
      .get(`${apiLink}/random`)
      .then((x) =>
        Array.isArray(x.data)
          ? setReviewInput(RD.Data({ data: x.data[0] }))
          : setReviewInput(RD.Error({ error: "Invalid data" }))
      )
      .catch((x) => setReviewInput(RD.Error({ error: x })));
  }, [setReviewInput]);

  const handleSubmit = React.useCallback(
    async (e: React.MouseEvent<HTMLButtonElement>) => {
      e.preventDefault();
      setData(RD.Loading);

      if (reviewInput._tag !== "Data") {
        alert("Failed");
        return;
      }

      axios
        .post(`${apiLink}/api`, {
          text: reviewInput.data,
          model: selectedModel,
          lang: selectedLang == "eng" ? "" : selectedLang,
          naspects: 5,
        })
        .then((x) => setData(RD.Data({ data: x.data })))
        .catch((x) => setData(RD.Error({ error: x })));
    },
    [selectedLang, selectedModel, reviewInput]
  );

  const isError = React.useMemo(
    () => reviewInput._tag === "Error",
    [reviewInput]
  );

  const output = React.useMemo(
    () =>
      pipe(
        data,
        RD.map((x) =>
          Object.entries(x).sort(([, a], [, b]) => Number(b) - Number(a))
        ),
        RD.map((values) => ({
          labels: values.map(([label]) => label),
          datasets: [
            {
              label: "Score",
              data: values.map(([, value]) => value),
              borderColor: "rgb(53, 162, 235)",
              backgroundColor: "#38B2AC",
            } /*
      {
        label: "Dataset 2",
        data: [20, 30, 20, 10, 10, 5, 0],
        borderColor: "rgb(53, 162, 235)",
        backgroundColor: "rgba(53, 162, 235, 0.5)",
      },*/,
          ],
        }))
      ),
    [data]
  );

  return (
    <>
      <Head>
        <title>ðŸ’ƒ LADy</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container minWidth={"container.lg"} p="5">
        <Heading mb="10">ðŸ’ƒ LADy: A System for Latent Aspect Detection</Heading>
        <FormControl isInvalid={isError}>
          <HStack mb="5" spacing={4}>
            <Button
              leftIcon={<RepeatIcon />}
              colorScheme="teal"
              variant="outline"
              onClick={getRandomReview}
            >
              Random review
            </Button>
            <FormLabel>Model: </FormLabel>

            {pipe(
              models,
              RD.fold({
                onData: (x) => (
                  <Select
                    maxWidth={"120px"}
                    borderColor={"teal"}
                    value={selectedModel}
                    onChange={(e) => {
                      isModel(e.target.value)
                        ? setSelectedModel(e.target.value)
                        : null;

                      setSelectedLang(undefined);
                    }}
                  >
                    {pipe(
                      x,
                      R.toArray,
                      A.chain(([, model]) => model),
                      A.uniq(S.Eq),
                      A.sort(S.Ord),
                      A.map((am) => (
                        <option
                          key={am}
                          style={{ textTransform: "capitalize" }}
                          value={am}
                        >
                          {getAspectModelName(am)}
                        </option>
                      ))
                    )}
                  </Select>
                ),
                onError: () => <span>Failed to get model names</span>,
                onInit: () => <Spinner />,
                onLoading: () => <Spinner />,
              })
            )}
            <FormLabel>Language </FormLabel>

            {pipe(
              models,
              RD.map(R.filter((x) => x.includes(selectedModel))),
              RD.map(R.keys),
              RD.fold({
                onData: (xs) => (
                  <Select
                    placeholder="Select language"
                    maxWidth={"150px"}
                    borderColor={"teal"}
                    value={selectedLang}
                    onChange={(e) =>
                      isLang(e.target.value)
                        ? setSelectedLang(e.target.value)
                        : null
                    }
                  >
                    {xs.map((val) => (
                      <option key={val} value={val}>
                        {getLangName(val as Lang)}
                      </option>
                    ))}
                  </Select>
                ),
                onLoading: () => <Spinner />,
                onInit: () => <Spinner />,
                onError: () => <span>Failed to get model names</span>,
              })
            )}

            {/* <FormLabel>Number of aspects</FormLabel> */}

            {/* <NumberInput
                borderColor={"teal"}
                value={naspects}
                onChange={(value) => setnaspects(value)}
                min={5}
                max={25}
                step={5}
                maxW={24}
              >
                <NumberInputField />
                <NumberInputStepper>
                  <NumberIncrementStepper />
                  <NumberDecrementStepper />
                </NumberInputStepper>
              </NumberInput> */}
          </HStack>

          {pipe(
            reviewInput,
            RD.fold({
              onData: (x) => (
                <Textarea
                  mb="5"
                  placeholder="Write a review to see the results"
                  onChange={(ev) =>
                    setReviewInput(RD.Data({ data: ev.target.value }))
                  }
                  value={x}
                />
              ),
              onError: () => (
                <Textarea
                  mb="5"
                  placeholder="Write a review to see the results"
                  onChange={(ev) =>
                    setReviewInput(RD.Data({ data: ev.target.value }))
                  }
                  value={"Error"}
                />
              ),
              onLoading: () => (
                <Textarea mb="5" placeholder="Loading...." disabled />
              ),
              onInit: () => (
                <Textarea mb="5" placeholder="Loading...." disabled />
              ),
            })
          )}

          <Button
            colorScheme="teal"
            type="submit"
            disabled={data._tag !== "Data"}
            onClick={handleSubmit}
            isLoading={data._tag === "Loading"}
          >
            Submit
          </Button>
        </FormControl>
        {pipe(
          output,
          RD.fold({
            onData: (x) => <Chart output={x} />,
            onError: () => <span>Error!</span>,
            onInit: () => <></>,
            onLoading: () => <></>,
          })
        )}
        <Footer />
      </Container>
    </>
  );
}
